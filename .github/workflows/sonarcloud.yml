name: Vercel Production Deployment
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NODE_VERSION: '20'
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  PRODUCTION_DEPLOYMENT_URL: 'https://pokejut.vercel.app/'

on:
  push:
    branches:
      - main

jobs:
  Deploy-Production:
    runs-on: ubuntu-latest
    outputs:
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - uses: actions/checkout@latest

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Set up Node.js
        uses: actions/setup-node@latest
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install

      - name: Run tests with coverage
        run: npm run cover

      # Run SonarQube analysis
      - name: Run SonarQube Scanner
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.projectKey=Stradivary_pokejut
            -Dsonar.organization=stradivary
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.login=${{ env.SONAR_TOKEN }}
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.coverage.exclusions=src/**/*.test.ts, src/**/*.test.tsx, __snapshots__/**/*, src/**/*.spec.ts, src/**/*.spec.tsx, src/domain/use-cases/simulator/presistor.ts, src/data/entities/**/*, src/main.tsx, src/routes.tsx

      # Check SonarQube Quality Gate Status
      - name: Check SonarQube Quality Gate Status
        id: quality_gate
        run: |
          URL="https://sonarcloud.io/api/qualitygates/project_status?projectKey=projectkey_web-pokemon-evolution"
          TOKEN="${{ secrets.SONAR_TOKEN }}"
          STATUS="NONE"
          while [ "$STATUS" != "OK" ] && [ "$STATUS" != "ERROR" ]; do
            RESPONSE=$(curl -u $TOKEN: "$URL")
            STATUS=$(echo $RESPONSE | jq -r '.projectStatus.status')
            if [ "$STATUS" == "NONE" ]; then
              echo "Quality Gate status is pending..."
              sleep 10
            elif [ "$STATUS" == "ERROR" ]; then
              echo "Quality Gate failed."
              echo "::set-output name=quality_gate_passed::false"
              exit 0
            fi
          done
          echo "Quality Gate passed."
          echo "::set-output name=quality_gate_passed::true"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Conditional step based on Quality Gate result
      - name: Halt Deployment Due to Failed Quality Gate
        if: steps.quality_gate.outputs.quality_gate_passed != 'true'
        run: |
          echo "Halting deployment due to failed Quality Gate."
          exit 1

      # Build and deploy to Vercel and capture deployment URL
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Deploy Project Artifacts to Vercel
        if: success() && steps.quality_gate.outputs.quality_gate_passed == 'true'
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt

      - name: Extract Deployment URL
        if: success()
        id: extract-url
        run: echo "::set-output name=deployment-url::$(tail -1 deployment-url.txt)"
        
      - name: ZAP Scan
        uses: zaproxy/action-baseline@latest
        with:
          target: ${{ env.PRODUCTION_DEPLOYMENT_URL }}
